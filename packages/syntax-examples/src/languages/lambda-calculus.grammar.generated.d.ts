// This file was generated by syntax-codegen. Do not edit!
/* eslint-disable */
import type { AstNode, SyntaxParser, Token } from "@timkendrick/syntax";
declare module "@timkendrick/syntax" {
  export function syntax(source: "\n  LAMBDA ::= /\u03BB|\\\\/\n  DOT ::= \".\"\n  OPEN_PAREN ::= \"(\"\n  CLOSE_PAREN ::= \")\"\n  WHITESPACE ::= /\\s+/\n  VARIABLE ::= /[a-zA-Z][a-zA-Z0-9']*/\n\n  <Expression> ::= {\n    : <optional_whitespace>,\n    expression: <term>,\n    : <optional_whitespace>\n  }\n  <Lambda> ::= {\n    : LAMBDA,\n    parameter: <- VARIABLE,\n    : DOT,\n    body: <term>\n  }\n  <Application> ::= {\n    : OPEN_PAREN <optional_whitespace>,\n    function: <term>,\n    : <optional_whitespace>,\n    argument: <term>,\n    : <optional_whitespace> CLOSE_PAREN\n  }\n  <Variable> ::= {\n    name: <- VARIABLE\n  }\n  <term> ::= <Variable> | <Lambda> | <Application>\n  <optional_whitespace> ::= WHITESPACE | \"\"\n"): SyntaxParser<CustomSyntax_0a9fbcaf_TokenType, CustomSyntax_0a9fbcaf_Node, CustomSyntax_0a9fbcaf_Root>;
  type CustomSyntax_0a9fbcaf_TokenType = CustomSyntax_0a9fbcaf_TokenType_LAMBDA | CustomSyntax_0a9fbcaf_TokenType_DOT | CustomSyntax_0a9fbcaf_TokenType_OPEN_PAREN | CustomSyntax_0a9fbcaf_TokenType_CLOSE_PAREN | CustomSyntax_0a9fbcaf_TokenType_WHITESPACE | CustomSyntax_0a9fbcaf_TokenType_VARIABLE;
  type CustomSyntax_0a9fbcaf_TokenType_LAMBDA = "LAMBDA";
  type CustomSyntax_0a9fbcaf_TokenType_DOT = "DOT";
  type CustomSyntax_0a9fbcaf_TokenType_OPEN_PAREN = "OPEN_PAREN";
  type CustomSyntax_0a9fbcaf_TokenType_CLOSE_PAREN = "CLOSE_PAREN";
  type CustomSyntax_0a9fbcaf_TokenType_WHITESPACE = "WHITESPACE";
  type CustomSyntax_0a9fbcaf_TokenType_VARIABLE = "VARIABLE";
  type CustomSyntax_0a9fbcaf_NodeType = CustomSyntax_0a9fbcaf_NodeType_Expression | CustomSyntax_0a9fbcaf_NodeType_Lambda | CustomSyntax_0a9fbcaf_NodeType_Application | CustomSyntax_0a9fbcaf_NodeType_Variable;
  type CustomSyntax_0a9fbcaf_NodeType_Expression = "Expression";
  type CustomSyntax_0a9fbcaf_NodeType_Lambda = "Lambda";
  type CustomSyntax_0a9fbcaf_NodeType_Application = "Application";
  type CustomSyntax_0a9fbcaf_NodeType_Variable = "Variable";
  type CustomSyntax_0a9fbcaf_Node = CustomSyntax_0a9fbcaf_ExpressionNode | CustomSyntax_0a9fbcaf_LambdaNode | CustomSyntax_0a9fbcaf_ApplicationNode | CustomSyntax_0a9fbcaf_VariableNode;
  type CustomSyntax_0a9fbcaf_Root = CustomSyntax_0a9fbcaf_ExpressionNode;
  type CustomSyntax_0a9fbcaf_ExpressionNode = AstNode<CustomSyntax_0a9fbcaf_NodeType_Expression, CustomSyntax_0a9fbcaf_ExpressionNodeProperties>;
  interface CustomSyntax_0a9fbcaf_ExpressionNodeProperties {
    expression: CustomSyntax_0a9fbcaf_Pattern_term;
  }
  type CustomSyntax_0a9fbcaf_LambdaNode = AstNode<CustomSyntax_0a9fbcaf_NodeType_Lambda, CustomSyntax_0a9fbcaf_LambdaNodeProperties>;
  interface CustomSyntax_0a9fbcaf_LambdaNodeProperties {
    parameter: string;
    body: CustomSyntax_0a9fbcaf_Pattern_term;
  }
  type CustomSyntax_0a9fbcaf_ApplicationNode = AstNode<CustomSyntax_0a9fbcaf_NodeType_Application, CustomSyntax_0a9fbcaf_ApplicationNodeProperties>;
  interface CustomSyntax_0a9fbcaf_ApplicationNodeProperties {
    function: CustomSyntax_0a9fbcaf_Pattern_term;
    argument: CustomSyntax_0a9fbcaf_Pattern_term;
  }
  type CustomSyntax_0a9fbcaf_VariableNode = AstNode<CustomSyntax_0a9fbcaf_NodeType_Variable, CustomSyntax_0a9fbcaf_VariableNodeProperties>;
  interface CustomSyntax_0a9fbcaf_VariableNodeProperties {
    name: string;
  }
  type CustomSyntax_0a9fbcaf_Pattern_term = CustomSyntax_0a9fbcaf_VariableNode | CustomSyntax_0a9fbcaf_LambdaNode | CustomSyntax_0a9fbcaf_ApplicationNode;
  type CustomSyntax_0a9fbcaf_Pattern_optional_whitespace = Token<CustomSyntax_0a9fbcaf_TokenType_WHITESPACE> | null;
}